{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The work in this repository is part of a grant approved by the \u00e6ternity crypto foundation.</p>"},{"location":"#status-quo","title":"Status Quo","text":"<ul> <li>No batch actions (updates, transfers) for AENS names are possible</li> <li>No trading of AENS names possible</li> <li>Users still suffer from name expiration as they fail to consistently track name expiration</li> </ul>"},{"location":"#outlook","title":"Outlook","text":"<p>Wrapping AENS names into NFTs will make it easy to perform batch-actions on the names and enable new use cases. NFT trading is also highly anticipated and is another topic to tackle in that regards.</p> <p>The results of the work in this grant will:</p> <ul> <li>provide a way for the community to better manage their AENS names</li> <li>enable batch-actions for AENS names</li> <li>allow strangers to extend AENS names and get rewarded for that</li> </ul>"},{"location":"ideation-mindmap/","title":"Ideation Mindmap","text":""},{"location":"sponsors/","title":"Sponsors","text":"<p>This work is sponsored by the \u00e6ternity crypto foundation.</p> <p>Do you also wanna sponsor this work? Send some \u00c6 coins to:</p> <ul> <li><code>buymeacoffee.chain</code> or</li> <li><code>ak_3mw4DAv1mbo8XbEjTgt8UgWTgGJoNmiRnvCywz4BD6192kHtm</code></li> </ul>"},{"location":"diagrams/burn_nfts/","title":"Explicit Burn of NFTs","text":"<p>Note:</p> <ul> <li>Burning NFTs is only possible if the wrapped AENS names are expired</li> <li>The burn entrypoint is part of the AEX-141 standard and can be called by any user</li> </ul>"},{"location":"diagrams/burn_nfts/#single","title":"Single","text":"<pre><code>sequenceDiagram\n    actor Any user\n    Any user -&gt;&gt; NFT Contract: 1) burn: nft_id\n    Note left of NFT Contract: removes all data associated with the NFT\n    Note left of NFT Contract: burns the NFT</code></pre>"},{"location":"diagrams/burn_nfts/#multiple","title":"Multiple","text":"<pre><code>sequenceDiagram\n    actor Any user\n    Any user -&gt;&gt; NFT Contract: 1) burnMultiple: Set(nft_id)\n    Note left of NFT Contract: removes all data associated with the NFTs\n    Note left of NFT Contract: burns the NFTs</code></pre>"},{"location":"diagrams/extend_aens_names/","title":"Extend AENS names","text":""},{"location":"diagrams/extend_aens_names/#for-free","title":"For free","text":"<pre><code>sequenceDiagram\n    actor Any user\n    Any user -&gt;&gt; NFT Contract: 1) extendAll: nft_id\n    Note left of NFT Contract: extends all wrapped AENS names of the given NFT</code></pre>"},{"location":"diagrams/extend_aens_names/#for-reward","title":"For reward","text":"<pre><code>sequenceDiagram\n    actor Any user\n    Any user -&gt;&gt; NFT Contract: 1) extendAllForReward: nft_id\n    Note left of NFT Contract: extends all wrapped AENS names of the given NFT\n    NFT Contract --&gt;&gt; Any user: 2) send AE\n    Note left of NFT Contract: use amount of reward specified by NFT owner</code></pre>"},{"location":"diagrams/full-example-sequence/","title":"Full example sequence","text":"<pre><code>sequenceDiagram\n    actor AENS / NFT owner\n\n    AENS / NFT owner -&gt;&gt; NFT Contract: 1) wrapAndMint\n    Note left of NFT Contract: claims ownership of names&lt;br /&gt;mints NFT with id 1&lt;br /&gt;assigns names to NFT&lt;br /&gt;extends all AENS names\n    NFT Contract --&gt;&gt; AENS / NFT owner: assign ownership of NFT with id 1\n\n    actor User XY\n\n    User XY -&gt;&gt; NFT Contract: 2) extendAll: nft_id (1)\n    Note right of NFT Contract: extends all AENS names wrapped in the given NFT&lt;br /&gt; user does not get any reward\n\n    AENS / NFT owner -&gt;&gt; NFT Contract: 3) setGlobalConfig: reward_config\n    Note left of NFT Contract: enables global rewards for extending names&lt;br /&gt;in NFTs owned by the caller according to the config&lt;br /&gt;reward = 50 \u00c6&lt;br /&gt;block_window = 480&lt;br /&gt;emergency_reward = 100 \u00c6&lt;br /&gt;emergency_block_window = 10\n\n    AENS / NFT owner -&gt;&gt; NFT Contract: 4) depositToRewardPool\n    AENS / NFT owner --&gt;&gt; NFT Contract: 500 \u00c6\n    Note left of NFT Contract: adds 500 \u00c6 to reward pool of NFT owner\n\n    User XY -&gt;&gt; NFT Contract: 5) extendAll: nft_id (1)\n    Note right of NFT Contract: extends all AENS names wrapped in the given NFT&lt;br /&gt; user does not get any reward&lt;br /&gt; can be called anytime\n\n    User XY -&gt;&gt; NFT Contract: 6) extendAllForReward: nft_id (1)\n    NFT Contract --&gt;&gt; User XY: 50 \u00c6\n    Note right of NFT Contract: extends all AENS names wrapped in the given NFT&lt;br /&gt; can only be called 480 blocks before the names expire\n    Note right of NFT Contract: deducts 50 \u00c6 from reward pool of NFT owner&lt;br /&gt;new value: 450 \u00c6\n\n    AENS / NFT owner -&gt;&gt; NFT Contract: 7) wrapAndMint\n    Note left of NFT Contract: claims ownership of names&lt;br /&gt;mints NFT with id 2&lt;br /&gt;assigns names to NFT&lt;br /&gt;extends all AENS names\n    NFT Contract --&gt;&gt; AENS / NFT owner: assign ownership of NFT with id 2\n\n    AENS / NFT owner -&gt;&gt; NFT Contract: 8) setNftConfig: nft_id (2), reward_config\n    Note left of NFT Contract: provide NFT specific reward_config&lt;br /&gt;reward = 350 \u00c6&lt;br /&gt;block_window = 2400&lt;br /&gt;emergency_reward = 500 \u00c6&lt;br /&gt;emergency_block_window = 480\n\n    User XY -&gt;&gt; NFT Contract: 9) extendAllForReward: nft_id (2)\n    NFT Contract --&gt;&gt; User XY: 450 \u00c6\n    Note right of NFT Contract: emergency reward within the 480 block before expiration\n    Note right of NFT Contract: deducts 450 \u00c6 from reward pool of NFT owner&lt;br /&gt;new value: 0 \u00c6\n    Note right of NFT Contract: normally 500 \u00c6 would have been paid, but only 450 were \n\n    AENS / NFT owner -&gt;&gt; NFT Contract: 10) transferSingle: nft_id_old (1), nft_id_new (2), name\n    Note left of NFT Contract: associates provided name to nft with id 2&lt;br /&gt;extends all names wrapped in NFT with id 2\n\n    AENS / NFT owner -&gt;&gt; NFT Contract: 11) updatePointer: nft_id, name, pointer_key, pointer_object\n    Note left of NFT Contract: adds (or replaces) pointer for specific name wrapped in NFT\n\n    AENS / NFT owner -&gt;&gt; NFT Contract: 12) unwrapAll: nft_id (1), none\n    NFT Contract --&gt;&gt; AENS / NFT owner: transfer of all AENS names wrapped in NFT with id 1\n    Note left of NFT Contract: burns the NFT with id 1\n\n    AENS / NFT owner -&gt;&gt; NFT Contract: 13) unwrapAll: nft_id (2), user xy\n    NFT Contract --&gt;&gt; User XY: transfer of all AENS names wrapped in NFT with id 2\n    Note left of NFT Contract: burns the NFT with id 2</code></pre>"},{"location":"diagrams/revoke_aens_names/","title":"Revoke AENS names","text":""},{"location":"diagrams/revoke_aens_names/#single-name","title":"Single name","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) revokeSingle: nft_id, name\n    Note left of NFT Contract: revokes AENS name wrapped in the NFT\n    Note left of NFT Contract: removes association of name to NFT</code></pre> <p>Considerations</p> <ul> <li>How to reward users for extending?</li> </ul>"},{"location":"diagrams/revoke_aens_names/#multiple-names","title":"Multiple names","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) revokeMultiple: nft_id, Set(names)\n    Note left of NFT Contract: revokes AENS names wrapped in the NFT\n    Note left of NFT Contract: removes association of names to NFT</code></pre> <p>Considerations</p> <ul> <li>How to reward users for extending?</li> </ul>"},{"location":"diagrams/revoke_aens_names/#all-names","title":"All names","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) revokeAll: nft_id\n    Note left of NFT Contract: revokes AENS names wrapped in the NFT\n    Note left of NFT Contract: burns the NFT and removes all data associated to it</code></pre>"},{"location":"diagrams/reward_users/","title":"Reward users for extending names","text":"<p>By default, rewarding users for extending names wrapped in NFTs will not be activated.</p> <p>For rewarding, we distinguish between a global reward config and an NFT specific reward config. This allows users to provide higher rewards for specific NFTs that contain AENS names which they consider more valuable than others and vice versa.</p> <p>The global reward-config is defined by an account and will be applied on all NFTs this account owns.</p> <p>NFT specific reward-config always overrules the global reward-config.</p> <p>When an NFT is transferred to another account, the NFT specific reward-config will be removed.</p>"},{"location":"diagrams/reward_users/#reward-config","title":"Reward config","text":"<ul> <li><code>reward</code> the amount of \u00c6 (in \u00e6ttos) to be distributed, if a user extends names wrapped in an NFT in the regular <code>block_window</code></li> <li><code>block_window</code> the window (in keyblocks) before name expiration where the defined <code>reward</code> is paid</li> <li><code>emergency_reward</code> the amount of \u00c6 (in \u00e6ttos) to be distributed, if a user extends names wrapped in an NFT in the <code>emergency_block_window</code></li> <li><code>emergency_block_window</code> the window (in keyblocks) before name expiration where the defined <code>emergency_reward</code> is paid</li> </ul> <p>Note</p> <ul> <li><code>option(estimated_reward)</code> will be calculated based on the expiration date of the names wrapped in an NFT, considering the global reward-onfig (or the NFT specific reward-config if set) and the amount of \u00c6 deposited by the NFT owner</li> <li>in case the deposited \u00c6 amount of the NFT owner is lower than <code>reward</code> or <code>emergency_reward</code>, the remaining \u00c6 are returned</li> </ul>"},{"location":"diagrams/reward_users/#set-global-reward-config","title":"Set global reward config","text":"<pre><code>sequenceDiagram\n    actor Any user\n    Any user -&gt;&gt; NFT Contract: 1) setGlobalConfig: reward_config\n    Note left of NFT Contract: activates rewarding based on provided config</code></pre>"},{"location":"diagrams/reward_users/#remove-global-reward-config","title":"Remove global reward config","text":"<pre><code>sequenceDiagram\n    actor Any user\n    Any user -&gt;&gt; NFT Contract: 1) removeGlobalConfig\n    Note left of NFT Contract: deactivates rewarding by removing the config</code></pre>"},{"location":"diagrams/reward_users/#set-nft-specific-reward-config","title":"Set NFT specific reward config","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) setNftConfig: nft_id, reward_config\n    Note left of NFT Contract: activates NFT specific config</code></pre>"},{"location":"diagrams/reward_users/#remove-nft-specific-reward-config","title":"Remove NFT specific reward config","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) removeNftConfig: nft_id\n    Note left of NFT Contract: deactivates NFT specific config</code></pre>"},{"location":"diagrams/reward_users/#deposit-to-reward-pool","title":"Deposit to reward pool","text":"<pre><code>sequenceDiagram\n    actor Any user\n    Any user -&gt;&gt; NFT Contract: 1) depositToRewardPool\n    Note left of NFT Contract: adds the amount of \u00e6ttos sent to the reward pool of an account</code></pre>"},{"location":"diagrams/reward_users/#withdraw-reward-balance","title":"Withdraw reward balance","text":"<pre><code>sequenceDiagram\n    actor Any user\n    Any user -&gt;&gt; NFT Contract: 1) WithdrawFromRewardPool: option(amount)\n    Note left of NFT Contract: removes the provided amount (\u00e6ttios) from the reward pool of an account\n    Note left of NFT Contract: if no amount is provided, the complete balance in reward pool will be withdrawn</code></pre>"},{"location":"diagrams/transfer_aens_names/","title":"Transfer AENS names","text":""},{"location":"diagrams/transfer_aens_names/#single-name","title":"Single name","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) transferSingle: nft_id_old, nft_id_new, name\n    Note left of NFT Contract: requires caller to be owner of both NFTs\n    Note left of NFT Contract: changes association of name from one NFT to another NFT</code></pre>"},{"location":"diagrams/transfer_aens_names/#multiple-names","title":"Multiple names","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) transferMultiple: nft_id_old, nft_id_new, Set(names)\n    Note left of NFT Contract: requires caller to be owner of both NFTs\n    Note left of NFT Contract: changes association of names from one NFT to another NFT</code></pre>"},{"location":"diagrams/transfer_aens_names/#all-names","title":"All names","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) transferAll: nft_id_old, nft_id_new\n    Note left of NFT Contract: requires caller to be owner of both NFTs\n    Note left of NFT Contract: changes association of name from one NFT to another NFT\n    Note left of NFT Contract: burns the old NFT</code></pre> <p>Considerations</p> <ul> <li>Allow to transfer AENS names to NFTs owned by other accounts?<ul> <li>Users could define per NFT if they want to allow this</li> <li>By default this would not be allowed to prevent spamming NFTs with (unwanted) AENS names</li> </ul> </li> </ul>"},{"location":"diagrams/transfer_nfts/","title":"Transfer NFTs","text":""},{"location":"diagrams/transfer_nfts/#single","title":"Single","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) transfer: recipient, nft_id, option(data)\n    Note left of NFT Contract: default transfer entrypoint of AEX-141</code></pre>"},{"location":"diagrams/transfer_nfts/#multiple","title":"Multiple","text":"<pre><code>sequenceDiagram\n    actor Any user\n    Any user -&gt;&gt; NFT Contract: 1) transferMultiple: Set(nft_id)\n    Note left of NFT Contract: removes all data associated with the NFTs\n    Note left of NFT Contract: burns the NFTs</code></pre>"},{"location":"diagrams/unwrap_aens_names/","title":"Unwrap AENS names","text":""},{"location":"diagrams/unwrap_aens_names/#single-name","title":"Single name","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) unwrapSingle: nft_id, name, option(recipient)\n    NFT Contract --&gt;&gt; NFT owner: 1.1) transfer name</code></pre>"},{"location":"diagrams/unwrap_aens_names/#multiple-names","title":"Multiple names","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) unwrapMultiple: nft_id, Set(names), option(recipient)\n    NFT Contract --&gt;&gt; NFT owner: 1.1) transfer names</code></pre>"},{"location":"diagrams/unwrap_aens_names/#all-names","title":"All names","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) unwrapAll: nft_id, option(recipient)\n    Note left of NFT Contract: burns the NFT\n    NFT Contract --&gt;&gt; NFT owner: 1.1) transfer names</code></pre> <p>Note:</p> <ul> <li>If no recipient is defined, the names will be returned to the owner of the NFT calling the unwrap entrypoint</li> </ul>"},{"location":"diagrams/update_pointers/","title":"Update pointers of AENS names","text":""},{"location":"diagrams/update_pointers/#add-a-single-pointer","title":"Add a single pointer","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) addPointer: nft_id, name, pointer_key, pointer_object\n    Note left of NFT Contract: keeps other existing pointers\n    Note left of NFT Contract: adds (replaces) a single pointer of the provided name</code></pre>"},{"location":"diagrams/update_pointers/#add-a-set-of-pointers","title":"Add a set of pointers","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) setPointers: nft_id, name, map(pointer_key, pointer_object), keepExisting\n    Note left of NFT Contract: keeps other existing pointers only if keepExisting=true\n    Note left of NFT Contract: sets (replaces) pointers of the provided name</code></pre>"},{"location":"diagrams/update_pointers/#remove-a-single-pointer","title":"Remove a single pointer","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) removePointer: nft_id, name, pointer_key\n    Note left of NFT Contract: keeps other existing pointers\n    Note left of NFT Contract: removes the provided pointer of the provided name</code></pre>"},{"location":"diagrams/update_pointers/#remove-multiple-pointers","title":"Remove multiple pointers","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) removePointers: nft_id, name, Set(pointer_key)\n    Note left of NFT Contract: keeps other existing pointers\n    Note left of NFT Contract: removes the provided pointers of the provided name</code></pre>"},{"location":"diagrams/update_pointers/#remove-all-pointers","title":"Remove all pointers","text":"<pre><code>sequenceDiagram\n    actor NFT owner\n    NFT owner -&gt;&gt; NFT Contract: 1) removeAllPointers: nft_id, name\n    Note left of NFT Contract: removes the provided pointer of the provided name</code></pre>"},{"location":"diagrams/wrap_aens_names/","title":"Wrap AENS names","text":""},{"location":"diagrams/wrap_aens_names/#wrap-names-by-minting-a-new-nft","title":"Wrap names by minting a new NFT","text":"<pre><code>sequenceDiagram\n    actor AENS owner\n    AENS owner -&gt;&gt; NFT Contract: 1) wrapAndMint: map(name, delegation_signature)\n    Note left of NFT Contract: claims ownership of names\n    Note left of NFT Contract: mints NFT\n    Note left of NFT Contract: assigns names to NFT\n    Note left of NFT Contract: extends all names\n    NFT Contract --&gt;&gt; AENS owner: 1.1) assign ownership of NFT</code></pre> <p>Considerations</p> <ul> <li>Delegation signature needs to be created in advance for each AENS name.<ul> <li>In the future it will be possible to give a contract permission to handle all AENS names owned by an account, see: https://github.com/aeternity/aeternity/issues/4080</li> </ul> </li> </ul>"},{"location":"diagrams/wrap_aens_names/#wrap-name-into-existing-nft","title":"Wrap name into existing NFT","text":"<pre><code>sequenceDiagram\n    actor AENS owner\n    AENS owner -&gt;&gt; NFT Contract: 1) wrapSingle: nft_id, name, delegation_signature\n    Note left of NFT Contract: claims ownership of name\n    Note left of NFT Contract: assigns name to NFT\n    Note left of NFT Contract: extends all names</code></pre>"},{"location":"diagrams/wrap_aens_names/#wrap-multiple-names-into-existing-nft","title":"Wrap multiple names into existing NFT","text":"<pre><code>sequenceDiagram\n    actor AENS owner\n    AENS owner -&gt;&gt; NFT Contract: 1) wrapMultiple: nft_id, map(name, delegation_signature)\n    Note left of NFT Contract: claims ownership of names\n    Note left of NFT Contract: assigns names to NFT\n    Note left of NFT Contract: extends all names</code></pre>"}]}